#Be aware
library(lubridate)
boem_data[,15] = mdy(boem_data$Date)
colnames(boem_data)[15] = "date_year"
#dplyr
boem_data = boem_data %>% arrange(desc(date_year))
boem_data$Date = as.factor(boem_data$Date)
#not sure if this is necessary
#boem_data$Date = as.factor(boem_data$Date)
#boem_data$Date = boem_data$Date[order(as.Date(boem_data$Date, format="%m/%d/%Y")),]
#daily$DoW <- ordered(daily$DoW, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
#"Friday", "Saturday", "Sunday"))
str(boem_data)
?order
#Carbon conversion
#Maybe use ifelse()
#this takes um^3/mL and gives ug/mL
#Doesn't work on a vector/dataframe
boem_data[,16] = (if (boem_data$Classification == "Diatom")
{(boem_data$Total.BV/1000000)*0.065}
else if (boem_data$Classification == "Dinoflagellate")
{(boem_data$Total.BV/1000000)*0.16}
else if(boem_data$Classification == "Cyanobacteria")
{(boem_data$Total.BV/1000000)*0.22}
else if(boem_data$Classification == "Other")
{(boem_data$Total.BV/1000000)*0.22})
#Use this instead
#does the conversion in per each entry
#this takes um^3/mL and gives ug/mL
boem_data[,16] = ifelse(boem_data$Classification == "Diatom",(boem_data$Total.BV/1000000)*0.065,
ifelse(boem_data$Classification == "Dinoflagellate", (boem_data$Total.BV/1000000)*0.16,
(boem_data$Total.BV/1000000)*0.22)
)
#USING IFELSE AND GREPL BOTH USEFUL
#grepl lets us give a value ridge/swale to sites with R in them or not
#NOT SURE WHAT FIXED = TRUE DOES ifelse (condition, if true do this, else do this)
boem_data[,17] = ifelse(grepl("R", boem_data$Murie.Site, fixed = TRUE),
paste("Ridge"),
paste("Swale"))
#name the columns
colnames(boem_data)[16] = "carbon_biomass"
colnames(boem_data)[17] = "topo"
summary(boem_data$carbon_biomass)
glimpse(boem_data)
#Checking the data for outliers
#Rhizosolenia imbricta = questionable
boem_data[boem_data$carbon_biomass >0.5,]
boem_data[boem_data$carbon_biomass == 0.0,]
boem_o = boem_data[boem_data$Season=="",]
boem_o
#removing rows and columns that don't have data or are outliers/questionable
boem_data = boem_data[-c(2458,9178,13139),]
# using plyr revalue function
levels(boem_data$Site.Category)
#Using revalue to rename CC shoals to just shoals have to assign
#to the original to make permanent
library(plyr)
?revalue
#recode is the dplyr version--may work
boem_data$Site.Category = revalue(boem_data$Site.Category, c("Cape Canaveral Shoals" = "Shoals"))
levels(boem_data$Site.Category)
str(boem_data)
#dplyr version of str()
glimpse(boem_data)
#Checking the names and
class(boem_data$Classification)
names(table(boem_data$Classification))
names(table(boem_data$Date))
unique(boem_data$Date)
names(table(boem_data$Season))
unique(boem_data$Date)
levels(boem_data$Date)
glimpse(boem_biomass_sum)
unique(boem_data)
#Calculating the sum of each site
#CREATING A DATAFRAME to group the data by Date->Site_region-> Depth -> Classification
#-------------------------------------------Site.Category instead of Murie Site
?arrange
detach("package:plyr", unload=TRUE)
#may have to do this if error: function should not be called
#directly comes up
boem_biomass_sum = group_by(boem_data, date_year,Date, Site.Category, Depth, Classification, topo, Murie.Site) %>%
summarise(
count = n(),
mean = mean(carbon_biomass, na.rm = T),
sd = sd(carbon_biomass, na.rm = T),
sum = sum(carbon_biomass)
)
range(boem_biomass_sum$sum)
#Only way I could figure out how to do this
#Take the dataframe I just made and make a new one with it
#Mean carbon_biomass/site based on the ridge/swale, depth etc
biomass_site_mean = group_by(boem_biomass_sum, date_year,Date, Site.Category, Depth, Classification) %>%
summarise(
mean_site = mean(sum)
)
range(biomass_site_mean$mean_site)
max(biomass_site_mean$mean_site)
max = biomass_site_mean[biomass_site_mean$mean_site==0.3189654,]
max
#how to count how many unique values are in a column
length(unique(boem_data$topo))
boem_biomass_sum$sum
str(boem_biomass_sum)
#-----------------PLOTTING THE DATA-------------------------
#Boxplot by region
#bull and chester together dredge then canaveral or could just number
#one word
ggplot(biomass_site_mean, aes(x=Site.Category, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
coord_flip()
#Boxplots of Dates and Classification
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_wrap(~Classification) +
coord_flip()
#Boxplots of regions
ggplot(boem_biomass_sum, aes(x=Date, y=sum)) +
geom_boxplot() + #and to make the dates not weird
facet_grid(Classification~Site.Category) +
coord_flip()
?scale_color_brewer
#Boxplots of depth
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_wrap(~Depth) +
coord_flip()
##Boxplots of depth
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_grid(Classification~Depth) +
coord_flip()
unique(biomass_site_mean$Date)
#Barplots of category and classification
#THIS SHIT IS HANDY BUT BE CAREFUL
for (depth in unique(biomass_site_mean$Depth)) {
#new plot window for each plot
dev.new()
#The print function below, be careful how you subset it
print(ggplot(biomass_site_mean[biomass_site_mean$Depth==depth,],
aes(x=Date, y=mean_site*1000,
fill = Classification)) +
ggtitle(" Average Carbon Biomass Per Site",subtitle = depth) +
xlab("Date") + ylab(expression("Mean Biomass Per Site,"~mu*g~C~L^-1)) +
facet_wrap(~Site.Category) +
geom_bar(stat = "identity") + #<----dont forget the plus
#scale_fill_brewer(palette="Set1")
scale_fill_manual(values=c("#4daf4a", "#377eb8", "#e41a1c","#9b42f4")) +
#and to make the dates not weird
coord_flip() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line("grey"),
panel.grid.minor = element_line("grey"),
panel.border = element_blank(),
panel.background = element_blank())
)
}
unique(biomass_site_mean$Date)
boem_data$Date = as.factor(boem_data$Date, levels = unique(boem_data$Date))
?as.factor
boem_data$Date = as.factor(boem_data$Date, ordered = T)
unique(boem_data$Date)
#dplyr
boem_data = boem_data %>% arrange(date_year)
boem_data$Date = as.factor(boem_data$Date)
unique(boem_data$Date)
boem_data$Date = levels(unique(boem_data$Date))
boem_data$Date(levels)
levels(boem_data$Date)
levels(boem_data$Date) = unique(boem_data$Date)
levels(boem_data$Date)
boem_data$Date = as.factor(boem_data$Date, levels = unique(boem_data$Date))
boem_data$Date = as.factor(boem_data$Date, levels(boem_data$Date) = unique(boem_data$Date))
boem_data$Date = as.factor(boem_data$Date, levels = unique(boem_data$Date))
boem_data$Date = factor(boem_data$Date, levels = unique(boem_data$Date))
unique(boem_data$Date)
levels(boem_data$Date) = unique(boem_data$Date)
levels(boem_data$Date)
#dplyr
boem_data = boem_data %>% arrange(date_year)
boem_data$Date = factor(boem_data$Date, levels = unique(boem_data$Date))
unique(boem_data$Date)
#insert data
#make sure to put the .csv
boem_data = read.csv("BOEM_CSV_MACY.csv", header = T)
boem_data$Date = as.character.Date(boem_data$Date)
#Had to uninstall tidyverse and install lubridate package separately to get this function to work
#Be aware
library(lubridate)
boem_data[,15] = mdy(boem_data$Date)
colnames(boem_data)[15] = "date_year"
#dplyr
boem_data = boem_data %>% arrange(date_year)
boem_data$Date = as.factor(boem_data$Date)
unique(boem_data$Date)
levels(boem_data$Date) = unique(boem_data$Date)
levels(boem_data$Date)
#this takes um^3/mL and gives ug/mL
boem_data[,16] = ifelse(boem_data$Classification == "Diatom",(boem_data$Total.BV/1000000)*0.065,
ifelse(boem_data$Classification == "Dinoflagellate", (boem_data$Total.BV/1000000)*0.16,
(boem_data$Total.BV/1000000)*0.22)
)
#USING IFELSE AND GREPL BOTH USEFUL
#grepl lets us give a value ridge/swale to sites with R in them or not
#NOT SURE WHAT FIXED = TRUE DOES ifelse (condition, if true do this, else do this)
boem_data[,17] = ifelse(grepl("R", boem_data$Murie.Site, fixed = TRUE),
paste("Ridge"),
paste("Swale"))
#name the columns
colnames(boem_data)[16] = "carbon_biomass"
colnames(boem_data)[17] = "topo"
summary(boem_data$carbon_biomass)
glimpse(boem_data)
#Checking the data for outliers
#Rhizosolenia imbricta = questionable
boem_data[boem_data$carbon_biomass >0.5,]
boem_data[boem_data$carbon_biomass == 0.0,]
boem_o = boem_data[boem_data$Season=="",]
boem_o
#removing rows and columns that don't have data or are outliers/questionable
boem_data = boem_data[-c(2458,9178,13139),]
# using plyr revalue function
levels(boem_data$Site.Category)
#Using revalue to rename CC shoals to just shoals have to assign
#to the original to make permanent
library(plyr)
?revalue
#recode is the dplyr version--may work
boem_data$Site.Category = revalue(boem_data$Site.Category, c("Cape Canaveral Shoals" = "Shoals"))
levels(boem_data$Site.Category)
str(boem_data)
#dplyr version of str()
glimpse(boem_data)
#Checking the names and
class(boem_data$Classification)
names(table(boem_data$Classification))
names(table(boem_data$Date))
unique(boem_data$Date)
names(table(boem_data$Season))
unique(boem_data$Date)
levels(boem_data$Date)
glimpse(boem_biomass_sum)
unique(boem_data)
#Calculating the sum of each site
#CREATING A DATAFRAME to group the data by Date->Site_region-> Depth -> Classification
#-------------------------------------------Site.Category instead of Murie Site
?arrange
detach("package:plyr", unload=TRUE)
#may have to do this if error: function should not be called
#directly comes up
boem_biomass_sum = group_by(boem_data, date_year,Date, Site.Category, Depth, Classification, topo, Murie.Site) %>%
summarise(
count = n(),
mean = mean(carbon_biomass, na.rm = T),
sd = sd(carbon_biomass, na.rm = T),
sum = sum(carbon_biomass)
)
range(boem_biomass_sum$sum)
#Only way I could figure out how to do this
#Take the dataframe I just made and make a new one with it
#Mean carbon_biomass/site based on the ridge/swale, depth etc
biomass_site_mean = group_by(boem_biomass_sum, date_year,Date, Site.Category, Depth, Classification) %>%
summarise(
mean_site = mean(sum)
)
range(biomass_site_mean$mean_site)
max(biomass_site_mean$mean_site)
max = biomass_site_mean[biomass_site_mean$mean_site==0.3189654,]
max
#how to count how many unique values are in a column
length(unique(boem_data$topo))
boem_biomass_sum$sum
str(boem_biomass_sum)
#-----------------PLOTTING THE DATA-------------------------
#Boxplot by region
#bull and chester together dredge then canaveral or could just number
#one word
ggplot(biomass_site_mean, aes(x=Site.Category, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
coord_flip()
#Boxplots of Dates and Classification
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_wrap(~Classification) +
coord_flip()
#Boxplots of regions
ggplot(boem_biomass_sum, aes(x=Date, y=sum)) +
geom_boxplot() + #and to make the dates not weird
facet_grid(Classification~Site.Category) +
coord_flip()
?scale_color_brewer
#Boxplots of depth
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_wrap(~Depth) +
coord_flip()
##Boxplots of depth
ggplot(biomass_site_mean, aes(x=Date, y=mean_site)) +
geom_boxplot() + #and to make the dates not weird
facet_grid(Classification~Depth) +
coord_flip()
unique(biomass_site_mean$Date)
data$Treatment <- factor(data$Treatment, levels=unique(data$Treatment))
#Barplots of category and classification
#THIS SHIT IS HANDY BUT BE CAREFUL
for (depth in unique(biomass_site_mean$Depth)) {
#new plot window for each plot
dev.new()
#The print function below, be careful how you subset it
print(ggplot(biomass_site_mean[biomass_site_mean$Depth==depth,],
aes(x=Date, y=mean_site*1000,
fill = Classification)) +
ggtitle(" Average Carbon Biomass Per Site",subtitle = depth) +
xlab("Date") + ylab(expression("Mean Biomass Per Site,"~mu*g~C~L^-1)) +
facet_wrap(~Site.Category) +
geom_bar(stat = "identity") + #<----dont forget the plus
#scale_fill_brewer(palette="Set1")
scale_fill_manual(values=c("#4daf4a", "#377eb8", "#e41a1c","#9b42f4")) +
#and to make the dates not weird
coord_flip() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line("grey"),
panel.grid.minor = element_line("grey"),
panel.border = element_blank(),
panel.background = element_blank())
)
}
for (depth in unique(biomass_site_mean$Depth)) {
#new plot window for each plot
dev.new()
#The print function below, be careful how you subset it
myplot = print(ggplot(biomass_site_mean[biomass_site_mean$Depth==depth,],
aes(x=Date, y=mean_site*1000,
fill = Classification)) +
ggtitle(" Average Carbon Biomass Per Site",subtitle = depth) +
xlab("Date") + ylab(expression("Mean Biomass Per Site,"~mu*g~C~L^-1)) +
facet_wrap(~Site.Category) +
geom_bar(stat = "identity") + #<----dont forget the plus
#scale_fill_brewer(palette="Set1")
scale_fill_manual(values=c("#4daf4a", "#377eb8", "#e41a1c","#9b42f4")) +
#and to make the dates not weird
coord_flip() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line("grey"),
panel.grid.minor = element_line("grey"),
panel.border = element_blank(),
panel.background = element_blank())
)
ggsave(myplot, filename = paste("barplot",depth,".png", sep = ""))
}
?ggsave
for (depth in unique(biomass_site_mean$Depth)) {
#new plot window for each plot
dev.new()
#The print function below, be careful how you subset it
print(ggplot(biomass_site_mean[biomass_site_mean$Depth==depth,],
aes(x=Date, y=mean_site*1000,
fill = Classification)) +
ggtitle(" Average Carbon Biomass Per Site",subtitle = depth) +
xlab("Date") + ylab(expression("Mean Biomass Per Site,"~mu*g~C~L^-1)) +
facet_wrap(~Site.Category) +
geom_bar(stat = "identity") + #<----dont forget the plus
#scale_fill_brewer(palette="Set1")
scale_fill_manual(values=c("#4daf4a", "#377eb8", "#e41a1c","#9b42f4")) +
#and to make the dates not weird
coord_flip() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line("grey"),
panel.grid.minor = element_line("grey"),
panel.border = element_blank(),
panel.background = element_blank())
)
ggsave( filename = paste("barplot",depth,".png", sep = ""), plot = last_plot())
}
for (depth in unique(biomass_site_mean$Depth)) {
#new plot window for each plot
dev.new()
#The print function below, be careful how you subset it
print(ggplot(biomass_site_mean[biomass_site_mean$Depth==depth,],
aes(x=Date, y=mean_site*1000,
fill = Classification)) +
ggtitle(" Average Carbon Biomass Per Site",subtitle = depth) +
xlab("Date") + ylab(expression("Mean Biomass Per Site,"~mu*g~C~L^-1)) +
facet_wrap(~Site.Category) +
geom_bar(stat = "identity") + #<----dont forget the plus
#scale_fill_brewer(palette="Set1")
scale_fill_manual(values=c("#4daf4a", "#377eb8", "#e41a1c","#9b42f4")) +
#and to make the dates not weird
coord_flip() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_line("grey"),
panel.grid.minor = element_line("grey"),
panel.border = element_blank(),
panel.background = element_blank())
)
ggsave( filename = paste("barplot_",depth,".png", sep = ""), plot = last_plot())
}
#Checking the type of distribution
library(fitdistrplus)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.2)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.05)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.03)
biomass_site_mean[biomass_site_mean== "Ridge"]
ggplot(biomass_site_mean, aes(x=Date, y=mean_site*1000, fill = Classification)) +
facet_grid(Site.Category~Depth) +
geom_bar(stat = "identity") + #<----dont forget the plus
#and to make the dates not weird
coord_flip()
#Check what the distribution of biomass sums look like
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.03)
#Check what the distribution of biomass sums look like
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.02)
#Try a log10 transformation to see how this looks
#Add a column to the boem_biomass_sum dataframe
boem_biomass_sum[,6] = log10(boem_biomass_sum$sum)
#Try a log10 transformation to see how this looks
#Add a column to the boem_biomass_sum dataframe
boem_biomass_sum[,6] = log10(boem_biomass_sum$sum)
colnames(boem_biomass_sum)[6] = "log_biomass"
log_biomass = boem_biomass_sum$log_biomass
ggplot(data = boem_biomass_sum,mapping = aes(log_biomass)) +
geom_histogram(binwidth = 0.2)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.02)
#use the fitdistr to looks at the distribution of newly transformed data
fitdistr(log_biomass, "normal")
#Cullen and Frey graph shows the observations are close to normal
descdist(log_biomass, discrete = FALSE)
ks.test(log_biomass, "pnorm", mean=mean(log_biomass), sd=sd(log_biomass))
#Test to see if normal is a good estimate of the distribution
#pnorm is just a normal distribution
ks.test(log_biomass, "pnorm", mean=mean(log_biomass), sd=sd(log_biomass))
#Test to see if normal is a good estimate of the distribution
#pnorm is just a normal distribution
ks.test(log_biomass, "pnorm", mean=mean(log_biomass), sd=sd(log_biomass))
#use the fitdistr to looks at the distribution of newly transformed data
fitdistr(log_biomass, "normal")
#Cullen and Frey graph shows the observations are close to normal
descdist(log_biomass, discrete = FALSE)
#Cullen and Frey graph shows the observations are close to normal
descdist(log_biomass, discrete = T)
#Cullen and Frey graph shows the observations are close to normal
descdist(log_biomass, discrete = F)
#Test to see if normal is a good estimate of the distribution
#pnorm is just a normal distribution
ks.test(log_biomass, "pnorm", mean=mean(log_biomass), sd=sd(log_biomass))
log_aov = aov(log_biomass~Date, data = boem_biomass_sum)
summary(log_aov)
log_aov1 = aov(log_biomass~Classification, data = boem_biomass_sum)
summary(log_aov1)
t_depth = t.test(log_biomass~boem_biomass_sum$Depth)
t_depth
log_aov3 = aov(log_biomass~Site.Category, data = boem_biomass_sum)
summary(log_aov3)
aov_resid <- residuals(object = log_aov)
aov_resid1 = residuals(object = log_aov1)
aov_resid3 = residuals(object = log_aov3)
shapiro.test(x = aov_resid)
shapiro.test(x = aov_resid1)
shapiro.test(x = aov_resid3)
dunc_date = duncan.test(log_aov,"Date", alpha = 0.01, console= T)
dunc_class = duncan.test(log_aov1,"Classification", alpha = 0.01, console= T)
dunc_region = duncan.test(log_aov3,"Site.Category", alpha = 0.01, console= T)
library(agricolae)
dunc_date = duncan.test(log_aov,"Date", alpha = 0.01, console= T)
library(lsr)
etaSquared(log_aov)
etaSquared(log_aov1)
etaSquared(log_aov3)
dunc_region = duncan.test(log_aov3,"Site.Category", alpha = 0.01, console= T)
## Run Shapiro-Wilk test to test for normality
#want > 0.05
shapiro.test(x = aov_resid)
aov_resid
plot(aov_resid)
lmodel_log = lm(log_biomass~boem_biomass_sum$Date)
summary(lmodel_log)
lmodel_log1 = lm(log_biomass~boem_biomass_sum$Site.Category)
summary(lmodel_log1)
lmodel_log2 = lm(log_biomass~boem_biomass_sum$Classification)
summary(lmodel_log2)
log_aov = aov(log_biomass~Date, data = boem_biomass_sum)
summary(log_aov)
log_aov1 = aov(log_biomass~Classification, data = boem_biomass_sum)
summary(log_aov1)
log_aov = aov(log_biomass~Date, data = boem_biomass_sum)
summary(log_aov)
log_aov1 = aov(log_biomass~Classification, data = boem_biomass_sum)
summary(log_aov1)
pairwise.t.test(log_biomass, boem_biomass_sum$Date,
p.adjust.method = "BH", pool.sd = FALSE)
pairwise.t.test(log_biomass, boem_biomass_sum$Classification,
p.adjust.method = "BH", pool.sd = FALSE)
pairwise.t.test(log_biomass, boem_biomass_sum$Date,
p.adjust.method = "BH", pool.sd = FALSE)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.02)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.01)
boem_biomass_sum[,6] = log10(boem_biomass_sum$sum)
colnames(boem_biomass_sum)[6] = "log_biomass"
ggplot(data = boem_biomass_sum,mapping = aes(log_biomass)) +
geom_histogram(binwidth = 0.1)
summary(boem_biomass_sum$sum)
summary(biomass_site_mean$mean_site)
ggplot(data = boem_biomass_sum,mapping = aes(sum))+
geom_histogram(binwidth = 0.01)
